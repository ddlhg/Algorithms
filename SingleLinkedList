#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

//structure of a node
struct singleLinkedList {
    int data; //data of the node
    struct singleLinkedList* next; //address of the next node
};
typedef struct singleLinkedList node;
node* start = NULL; //start pointer will be null at first

//Function that creates the list
void createList(int n);

//Function that creates nodes
void getNode(int &newNode);

//Function that displays the list
void displayList();

//Function that counts how many nodes there are
int countNode(node* start);

//Function that deletes a node in the middle of the list
void deleteNodeMiddle();

//Function that inserts a node in the middle of the list
void insertNodeMiddle();

int main()
{
    int n;
    cout << "Enter the number of nodes you want on your list: ";
    cin >> n;
    cout << endl;
    createList(n);
    deleteNodeMiddle();
    insertNodeMiddle();
    displayList();
    return 0;
}

singleLinkedList* getNode() {
    node * newNode;
    newNode = (node*)malloc(sizeof(node));
    cout << "Input data for the node: ";
    cin >> newNode->data;
    newNode->next = NULL;
    return newNode;
}

void createList(int n) {
    int i;
    node *newNode;
    node *temp;
    for (i = 0; i < n; i++) {
        newNode = getNode();
        if (start == NULL)
        {
            start = newNode;
        }
        else {
            temp = start;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
}

int countNode(node* start) {
    if (start == NULL) {
        return 0;
    }
    else {
        return (1+ countNode(start->next));
    }
}

void deleteNodeMiddle() {
    int ctr = 1, pos, nodectr;
    node* prev, * temp;
    if (start == NULL) {
        cout << "empty list";
        return;
    }
    else {
        cout<<"Enter the position of the node to delete: ";
        cin>>pos;
        nodectr = countNode(start);
        if (pos > nodectr) {
            cout<<"this node does not exist";
        }
        if (pos > 1 && pos < nodectr) {
            temp = prev = start; //first node
            while (ctr < pos) {
                 prev = temp;
                 temp = temp->next;
                 ctr++;
            }
            prev->next = temp->next; //main part of the code
            free(temp);
            cout<<"node deleted\n";
        }
        else {
            cout<<"invalid position";
        }
    }
}

void insertNodeMiddle() {
    node* newNode, * temp, * prev;
    int pos, nodectr, ctr = 1; //nodectr=size of the linked list
    cout << "Enter the position: ";
    cin >> pos;
    newNode = getNode();
    nodectr = countNode(start); //function returns # of elements
    if (pos > 1 && pos < nodectr) {
        temp = start;
        prev = start;
        while (ctr < pos) {
            prev = temp;
            temp = temp->next;
            ctr++;
        }
        prev->next = newNode;
        newNode->next = temp;
    }
    else {
        cout << "Position is not in the middle";
        //or call the two previous methods
    }
}

void displayList() {
    node* temp;
    temp = start;
    cout << "\nElements of the list from left to right are: \n";
    if (start == NULL)
    {
        cout << "The list is empty.";
    }
    else {
        while (temp != NULL) {
            cout << "Data = " << temp->data << "\n";
            temp = temp->next;
        }
    }
}
