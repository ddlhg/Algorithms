#include <iostream>
#include <vector>
using namespace std;

vector<int> binaryK(int k);
//function that 
int modularExpo(int a, vector<int> K, int n);

int main()
{
    int a,k, n;
    cout << "Enter a value for a: ";
    cin >> a;
    cout << "Enter a value for k: ";
    cin >> k;
    cout << "Enter a value for n: ";
    cin >> n;
    vector <int>convert;
    convert=binaryK(k);
    cout <<"\nModular Exponentiation of a=" << a << ", k=" << k << ", n=" << n << " is: " << modularExpo(a, convert, n) << endl;
    return 0;
}

//declaring vector
vector<int> binaryK(int k) {
    vector <int>K;  //empty list
    int temp = k;
    int i = 0;
    while (temp > 0) {
        K.push_back(temp % 2); //hint: use pushback
        temp = (temp - K[i]) / 2;
        i++;
    }
    return K;
}

int modularExpo(int a, vector<int> K, int n) {
    if (n == 1) //compares denominator to 1
    { return 0; }
    int b = 1;
    if (K.size() == 0)
    { return b; }
    int A = a;
    if (K[0] == 1) { b = a; }
    
    for (int i = 1; i <= K.size() - 1;i++) {
        A = A * A % n;
        if (K[i] == 1)
        {
            b = A * b % n;
            return b;
        }        
    }                    
}
