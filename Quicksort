#include <iostream>
#include <cstdlib>
using namespace std;

int partition(int A[], int start, int end)
{
	int pivot = A[start];		// first element as pivot
	int low = start;			// low points to the start of array
	int high = end;			// high points to the end of the array
	int i = end;				// initialize index of right most element 

	for (int j = end; j > start; j--) {
		if (A[j] > pivot)
		{
			swap(A[j], A[i--]);
		}
	}
	swap(A[start], A[i]);
	return i;					// return pivot element index (end)
}

void quickSort(int A[], int start, int end)
{
	if (start < end)
	{
		int pIndex = partition(A, start, end);	// index of pivot element in its sorted position
		quickSort(A, start, pIndex - 1);		// lower subarray
		quickSort(A, pIndex + 1, end);		// upper subarray
	}
}

void printArray(int A[], int length) {

	cout << "Unsorted array: \n";
	for (int i = 0; i < length; i++)
	{
		cout << A[i] << " ";
	}
	cout << endl << endl;
}

void printSortedArray(int A[], int length)
{
	cout << "Sorted array using quick sort: \n";
	for (int i = 0; i < length; i++)
	{
		cout << A[i] << " ";
	}
	cout << endl;
}
int main()
{
	int A[1000];
	int n = sizeof(A) / sizeof(A[0]);
	int element; // new element for array

	for (int i = 0; i < 1000; i++)
	{
		bool unique;
		do
		{
			unique = true;
			element = rand() % 1500; // generates random number w/ upper value of 1500
			for (int j = 0; j < i; j++) // check every time if value exist in array.
			{
				if (A[j] == element)
				{
					unique = false;
					break;
				}
			}
		} while (!unique);
		A[i] = element;

	}
	printArray(A, n);
	quickSort(A, 0, n - 1);
	printSortedArray(A, n);
	return 0;
}
